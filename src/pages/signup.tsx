import { type NextPage } from "next";
import Head from "next/head";
import { useState, useEffect } from "react";
import { api } from "../utils/api";
import Link from "next/link";
import { useRouter } from "next/router";
import { date } from "zod";
import { verify } from "crypto";

const Signup: NextPage = () => {
  const [checkedMale, setCheckedMale] = useState<boolean>(true);
  const [showConfirm, setShowConfirm] = useState<boolean>(false);
  const [lastEmailSent, setLastEmailSent] = useState<Date | null>(null);
  const [canSendEmail, setCanSendEmail] = useState<boolean>(true);
  const [token, setToken] = useState<string>("");
  const [error, setError] = useState<boolean>(false);
  const [input, setInput] = useState({
    email: "",
    firstName: "",
    lastName: "",
    phoneNumber: "",
    password: "",
    gender: "",
  });

  const router = useRouter();

  const { mutate: signup } = api.users.signup.useMutation({
    onSuccess: (data) => {
      if(data.token){
        setToken(data.token);
        setShowConfirm(true);
        router.push({
          //pathname: "/login",
          query: {
            token: data.token,
          },
        });
      }
    },
  });

  const { mutate: sendEmail } = api.users.sendEmail.useMutation();

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const requirements = [
      input.password.length >= 8,
      /[A-Z]/.test(input.password),
      /[0-9]/.test(input.password),
    ];
    
    const isPasswordValid = requirements.every(Boolean);
    if (!isPasswordValid) {
      setError(true);
      return;
    }
    else {
      setError(false);
    }

    const { email, firstName: firstname, lastName: lastname, phoneNumber, password, gender } = input;

    signup({ email, firstname, lastname, phoneNumber, password, gender: checkedMale ? "Male" : "Female" });
    
  };

  const sendEmailAgain = async () => {
    if (canSendEmail) {
      sendEmail({ email: input.email, token: token });
      setLastEmailSent(new Date()); // Set the time the email was sent
      setCanSendEmail(false); // Disable sending the email again
    }
  }

  useEffect(() => {
    if (lastEmailSent) {
      const timeout = setTimeout(() => {
        const timeSinceLastEmail = new Date().getTime() - lastEmailSent.getTime();
        if (timeSinceLastEmail >= 60000) { // 60000 ms = 1 minute
          setCanSendEmail(true); // Allow sending the email again after 1 minute
        }
      }, 60000 - (new Date().getTime() - lastEmailSent.getTime())); // Set the timeout based on time left
  
      return () => clearTimeout(timeout); // Cleanup the timeout on component unmount
    }
  }, [lastEmailSent]);

  return (
    <>
      <Head>
        <title>Registracija</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className=" dark:bg-blue-300  md:h-screen">
        <div className="relative flex min-h-screen flex-col justify-center overflow-hidden">
          <div className="m-auto w-full rounded-md bg-timberwolf p-6 shadow-md lg:max-w-xl">
            {!showConfirm && (
              <>
               <h1 className="text-center text-3xl font-semibold text-rich-black ">
              Registracija
            </h1>
            <form className="mt-6" onSubmit={handleSubmit}>
              <div className="mb-2">
                <label className="text-gray-800 block text-sm font-semibold">
                  Email
                </label>
                <input
                  type="email"
                  className="text-blue-700 focus:border-blue-400 dark:placeholder-gray-400 mt-2 block w-full rounded-md border bg-white px-4 py-2 focus:outline-none focus:ring focus:ring-rich-black focus:ring-opacity-40"
                  required
                  placeholder="john.doe@company.com"
                  onChange={(e) => {
                    setInput({ ...input, email: e.target.value });
                  }}
                />
              </div>
              <div className="mb-2">
                <label className="text-gray-800 block text-sm font-semibold">
                  Ime
                </label>
                <input
                  className="text-blue-700 focus:border-blue-400 focus:ring-blue-300 dark:placeholder-gray-400 mt-2 block w-full rounded-md border bg-white px-4 py-2 focus:outline-none focus:ring focus:ring-opacity-40"
                  required
                  placeholder="John"
                  onChange={(e) => {
                    setInput({ ...input, firstName: e.target.value });
                  }}
                />
              </div>
              <div className="mb-2">
                <label className="text-gray-800 block text-sm font-semibold">
                  Prezime
                </label>
                <input
                  className="text-blue-700 focus:border-blue-400 focus:ring-blue-300 dark:placeholder-gray-400 mt-2 block w-full rounded-md border bg-white px-4 py-2 focus:outline-none focus:ring focus:ring-opacity-40"
                  required
                  placeholder="Doe"
                  onChange={(e) => {
                    setInput({ ...input, lastName: e.target.value });
                  }}
                />
              </div>
              <div className="mb-2">
                <label className="text-gray-800 block text-sm font-semibold">
                  Broj telefona
                </label>
                <input
                  type="tel"
                  className="text-blue-700 focus:border-blue-400 focus:ring-blue-300 dark:placeholder-gray-400 mt-2 block w-full rounded-md border bg-white px-4 py-2 focus:outline-none focus:ring focus:ring-opacity-40"
                  required
                  placeholder="123-456-7890"
                  onChange={(e) => {
                    setInput({ ...input, phoneNumber: e.target.value });
                  }}
                />
              </div>
              <div className="mb-2">
                <label className="text-gray-800 block text-sm font-semibold">
                  Šifra
                </label>
                <input
                  type="password"
                  className="text-blue-700 focus:border-blue-400 focus:ring-blue-300 dark:placeholder-gray-400 mt-2 block w-full rounded-md border bg-white px-4 py-2 focus:outline-none focus:ring focus:ring-opacity-40"
                  required
                  placeholder="•••••••••"
                  onChange={(e) => {
                    setInput({ ...input, password: e.target.value });
                  }}
                />
                {error && (<p className="text-red-500 font-semibold mt-2">Šifra mora sadržati: minimalno 8 karaktera, 1 veliko slovo i 1 broj.</p>)}
              </div>
              <div className="mb-2 ">
                <label className="text-gray-800 block text-sm font-semibold">
                  Spol
                </label>
                <div className="flex items-center justify-center gap-4">
                  <label>Muško</label>
                  <input
                    onChange={() => {
                      setCheckedMale(true);
                    }}
                    type="radio"
                    defaultChecked={true}
                    name="gender"
                    className="text-blue-700 focus:border-blue-400 focus:ring-blue-300 dark:placeholder-gray-400  block rounded-md border bg-white px-4 py-2 focus:outline-none focus:ring focus:ring-opacity-40"
                  />

                  <label>Žensko</label>
                  <input
                    onChange={() => {
                      setCheckedMale(false);
                    }}
                    type="radio"
                    name="gender"
                    className="text-blue-700 focus:border-blue-400
                   focus:ring-blue-300 dark:placeholder-gray-400 block rounded-md border bg-white px-4 py-2 focus:outline-none focus:ring focus:ring-opacity-40"
                  />
                </div>
              </div>
              <div className="mt-6">
                <button className="focus:bg-blue-600 w-full transform rounded-md bg-blue-500 px-4 py-2 tracking-wide text-white transition-colors duration-200 hover:bg-prussian-blue focus:outline-none">
                  Registruj se
                </button>
              </div>
              <div className="mt-6">
                <Link href={"/salonsignup"} className="focus:bg-blue-600 w-full block text-center transform rounded-md bg-blue-500 px-4 py-2 tracking-wide text-white transition-colors duration-200 hover:bg-prussian-blue focus:outline-none">
                  Registruj se kao salon
                </Link>
              </div>
            </form>

            <p className="text-gray-700 mt-8 text-center text-xs font-light">
              {" "}
              Već imate nalog?{" "}
              <Link href="/login" className="font-medium text-gamboge hover:underline">
                Prijavite se
              </Link>
            </p>
              </>
            )}
            {showConfirm && (
              <>
                <h1 className="text-center text-3xl font-semibold text-rich-black ">
                  Potvrdite email
                </h1>
                <p className="text-gray-600 mb-4 mt-4">Poslali smo mail za potvrdu na vašu email adresu.</p>
                <p className="text-gray-500 mb-4">Ako niste dobili email, pritisnite dugme ispod da biste poslali ponovo.</p>
                {!canSendEmail && (
                  <p className="text-red-500 mt-4">Email možete poslati ponovo za 1 minut.</p>
                )}
                <div className="mt-6">
                <button 
                  onClick={sendEmailAgain} 
                  disabled={!canSendEmail} 
                  className={`focus:bg-blue-600 w-full transform rounded-md ${canSendEmail ? 'bg-blue-500 hover:bg-prussian-blue' : 'bg-gray-400 cursor-not-allowed'} px-4 py-2 tracking-wide text-white transition-colors duration-200 focus:outline-none`}>
                  Pošalji ponovo
                </button>
                </div>
              </>
            )}
          </div>
        </div>
      </main>
    </>
  );
};

export default Signup;
